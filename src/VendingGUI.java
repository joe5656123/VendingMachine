import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.util.*;

public class VendingGUI extends JFrame {

	private ArrayList<ImageIcon> images;
    private JTextField jtfSelectionField;
    private JTextArea jtaCandyGet;
    private JPanel jpReturn;
    private JLabel jpImage;

    private Item doritos = new Item(1, "Doritos");
	private Item hershey = new Item(1.25, "Hershey");
	private Item kitkat = new Item(1.25, "Kit-Kat");
	private Item lays = new Item(1, "Lays");
	private Item lifeSavers = new Item(.75, "Life Savers");
	private Item milkyWay = new Item(1.25, "Milky Way");
	private Item recees = new Item(1.25, "Recee's");
	private Item snickers = new Item(1.25, "Snickers");
	private Item sunChips = new Item(1, "Sun Chips");

    public VendingGUI() {
		images = new ArrayList<ImageIcon>();
		for (int i = 1; i < 10; i++) {
			images.add(new ImageIcon("Images\\" + i + ".jpg"));
		}

		jpReturn = new JPanel(new FlowLayout());
		jpReturn.setBorder(new TitledBorder("Get Candy"));
		jpImage = new JLabel(new ImageIcon("Images\\0.jpg"));
		jpImage.addMouseListener(new java.awt.event.MouseListener() {
			public void mouseEntered(MouseEvent e) {}
			public void mouseExited(MouseEvent e) {}
			public void mouseReleased(MouseEvent e) {}
			public void mousePressed(MouseEvent e) {}
			public void mouseClicked(MouseEvent e) {
				jpImage.setIcon(new ImageIcon("Images\\0.jpg"));
			}
		});
		jpReturn.add(jpImage);

		//setting various visual features and buttons
        setLayout(new FlowLayout(FlowLayout.LEFT));
        setResizable(false);
        setTitle("JVM");
        setSize(250, 575);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //build image grid
        //JPanel jpItemDisplay = new JPanel(new FlowLayout(FlowLayout.LEFT, 3, 3));
        JPanel jpItemDisplay = new JPanel(new GridLayout(3, 4, 3, 3));
        jpItemDisplay.setBorder(new TitledBorder("Inventory"));
        //add images to grid as JLabels
        for (ImageIcon i : images) {
			jpItemDisplay.add(new JLabel(i));
		}

        add(jpItemDisplay, BorderLayout.WEST);
        //Adding that drop spot at the bottom of a machine
        JPanel jpCandySpot = new JPanel(new FlowLayout(FlowLayout.LEFT, 3, 3));
        jtaCandyGet = new JTextArea(5, 20);
        jtaCandyGet.setEditable(false);

        //jpCandySpot.add(jtaCandyGet);

        add(jpCandySpot, BorderLayout.PAGE_START);

        //build the selection panel, put at the top for visibility
        JPanel jpSelection = new JPanel(new FlowLayout(FlowLayout.LEFT, 3, 3));
        jpSelection.setBorder(new TitledBorder("Item Type"));

        jtfSelectionField = new JTextField(20);
        jtfSelectionField.setEditable(false);

        jpSelection.add(jtfSelectionField);
        add(jpSelection, BorderLayout.PAGE_START);
        //adding the interactable buttons in a grid via a loop.  Except for the last two buttons.
        JPanel jpButtons = new JPanel(new GridLayout(4, 3, 3, 3));
        jpButtons.setBorder(new TitledBorder("Please make a selection"));
        JButton[] buttonGrid = new JButton[10];

        for (int i = 1; i < buttonGrid.length; i++) {//this part was fun! /sarcasm
            buttonGrid[i] = new JButton(String.valueOf(i));
            jpButtons.add(buttonGrid[i]);
            buttonGrid[i].addActionListener(listener);
        }

        JButton jbtEnter = new JButton();
        JButton jbtQuit = new JButton();
        jbtQuit.setText("Clear");
        jbtEnter.setText("Enter");

        jpButtons.add(jbtEnter);//action listeners generated by netbeans, can change to make simpler if we need
        jbtEnter.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEnterActionPerformed(evt);
            }
        });

        jpButtons.add(jbtQuit);//action listeners generated by netbeans, can change to make simpler if we need
        jbtQuit.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtQuitActionPerformed(evt);
            }
        });
		/*
        jtaCandyGet.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				this.setIcon(new ImageIcon());
			}
		});
		*/
        add(jpButtons, BorderLayout.PAGE_START);
		jpCandySpot.add(jpReturn);
    }//The following ActionListeners were NOT generated by netbeans
    ActionListener listener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JButton) {
                String text = ((JButton) e.getSource()).getText();
                // stufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                //jtfSelectionField.setText(text);
                jtfSelectionField.setText(text + ") " + doritos.getName() + ' ' + doritos.getPrice());
            }
        }
    };

    private void jbtQuitActionPerformed(java.awt.event.ActionEvent evt) {
        jtfSelectionField.setText("");
    }

    private void jbtEnterActionPerformed(java.awt.event.ActionEvent evt) {
        //TODO:Code that links the selection program to the UI Frank pls
        //jtaCandyGet.setText(jtfSelectionField.getText() + "CANDY YAY!"); //temp result
        //jtaCandyGet.setIcon(new ImageIcon(jtfSelectionField.getText() + ".jpg"));
        //System.out.print(jtfSelectionField.getText().split()[0].charAt(0));
		jpImage.setIcon(images.get(Integer.parseInt(jtfSelectionField.getText().split("[)]")[0]) - 1));
		//jpImage.setIcon("images\\" + jtfSelectionField.getText().split()[0].charAt(0)) - 1));
    }
	//we can remove main, it was only used for testing purposes, if you want and just call the constructor in the main method

    public static void main(String[] args) {
        JFrame vendingWindow = new VendingGUI();
        vendingWindow.setVisible(true);
    }
}
